<?xml version="1.0" encoding="UTF-8"?>

<?define ProductVersion="!(bind.FileVersion.JexusManager.exe)"?>
<?define UpgradeCode="F07B4406-6CA1-4BFB-BAF0-3A2675DA5728"?>
<?define ProductCode="629958AA-14AA-4F7A-8706-F3511D99EA38"?>
<?define PackageCode="89E25BEF-C13F-4FAF-BD71-6FD060C0BB24"?>
<?define ProductName="Jexus Manager"?>

<?if $(var.Platform) = x64 ?>
<?define PlatformProgramFilesFolder="ProgramFiles64Folder" ?>
<?define SourceDir=..\bin\x64?>
<?else ?>
<?define PlatformProgramFilesFolder="ProgramFilesFolder" ?>
<?define SourceDir=..\bin\x86?>
<?endif ?>

<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
     xmlns:netfx="http://schemas.microsoft.com/wix/NetFxExtension"
     xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">
    <Product Id="*"
             Name="$(var.ProductName) $(var.ProductVersion)"
             Language="1033"
             Version="$(var.ProductVersion)"
             Manufacturer="LeXtudio"
             UpgradeCode="$(var.UpgradeCode)">

        <Package Id="*"
                 Comments="Jexus Manager is the management console for IIS/IIS Express and Jexus."
                 InstallerVersion="300"
                 Languages="1033"
                 Compressed="yes"
                 InstallScope="perMachine"
                 Description="$(var.ProductName) $(var.ProductVersion)" />

        <Icon Id="icon.ico" SourceFile="iis.ico" />
        <Property Id="ARPPRODUCTICON" Value="icon.ico" />

        <!-- Upgrade information -->
		<Upgrade Id="$(var.UpgradeCode)">
			<!-- The UpgradeCode must be changed to allow two versions of SharpDevelop to be installed side-by-side -->
			
			<!-- Checks for older versions -->
			<UpgradeVersion Minimum="12.0.0"
				IncludeMinimum="yes"
				Maximum="$(var.ProductVersion)"
				IncludeMaximum="no" 
				Property="PREVIOUSVERSIONFOUND"/>
			<!-- Checks for newer versions -->
			<UpgradeVersion OnlyDetect="yes"
				Property="NEWERVERSIONFOUND"
				Minimum="$(var.ProductVersion)"
				IncludeMinimum="no"/>
		</Upgrade>

        <!-- Embed the cab -->
        <Media Id="1" Cabinet="cab1.cab" EmbedCab="yes" />

        <!-- MainFeature -->
        <Feature Id="ProductFeature"
                 Title="$(var.ProductName)"
                 Level="1"
                 ConfigurableDirectory="INSTALLDIR">

            <!-- Files installed -->
            <?if $(var.Platform) = x64 ?>
            <ComponentGroupRef  Id="JexusFiles64" />
            <?else ?>
            <ComponentGroupRef  Id="JexusFiles86" />
            <?endif ?>
            <ComponentRef Id="JexusManagerProgramMenuItems" />
            <ComponentRef Id="Dummy" />
        </Feature>

        <!-- Directories and files -->
        <Directory Id="TARGETDIR" Name="SourceDir">
            <Directory Id="$(var.PlatformProgramFilesFolder)">
                <Directory Id="INSTALLDIR" Name="$(var.ProductName)">
                    <Component Id="Dummy" Guid="{7D7AF5BF-E0D6-4997-9E98-C8BBBFD7A29D}">
                        <File Id="JexusManager.exe" Name="JexusManager.exe" Vital="no" DiskId="1" Source="$(var.SourceDir)\JexusManager.exe" />
                    </Component>
                </Directory>
            </Directory>
            <Directory Id="ProgramMenuFolder" Name="Programs">
				<Component Id="JexusManagerProgramMenuItems" Guid="BBB6934E-57F3-4E39-A2C8-C6C26A9FE0C6">
					<!--
								Fix ICE 38 by adding a dummy registry key that is the key for this shortcut.
								http://msdn.microsoft.com/library/en-us/msi/setup/ice38.asp
							-->
					<RegistryValue Id="JexusManagerExeStartMenuShortcutRegistryKey" Root="HKCU" Type="string" KeyPath="yes" Key="Software\LeXtudio\JexusManager\$(var.ProductVersion)" Name="ProgramFilesShortcut" Value="1" />
					<Shortcut Name="Jexus Manager $(var.ProductVersion)" Target="[!JexusManager.exe]" Id="JexusManagerExeStartMenuShortcut" WorkingDirectory="INSTALLDIR" Directory="ProgramMenuFolder" />
                    <RemoveFolder Id="CleanUpShortCut" Directory="ProgramMenuFolder" On="uninstall"/>
				</Component>
			</Directory>
        </Directory>

        <?if $(var.Platform) = x64 ?>
        <Condition Message="The 64-bit version of $(var.ProductName) cannot be installed on a 32-bit edition of Microsoft Windows.">
            <![CDATA[Installed OR VersionNT64]]>
        </Condition>
        <?else?>
        <Condition Message="The 32-bit version of $(var.ProductName) cannot be installed on a 64-bit edition of Microsoft Windows.">
            <![CDATA[Installed OR not VersionNT64]]>
        </Condition>
        <?endif ?>

        <!--
			If a newer version of SharpDevelop is installed, show an error message.
	
			This message is not displayed immediately, the FindRelatedProducts 
			action occurs well into the installation after the user has
			configured everything.
		-->
		<CustomAction Id="NoDowngrade" Error="A later version of [ProductName] is already installed." />

        <util:CloseApplication Id="CloseIisManager"
                            CloseMessage="yes"
                            Description="Please close Jexus Manager before continuing."
                            ElevatedCloseMessage="yes"
                            RebootPrompt="no"
                            PromptToContinue="yes"
                            Target="JexusManager.exe" />

        <!-- Custom Actions using Install Util -->
        <InstallExecuteSequence>
			<!--
				Display an error message if a newer version found.
				
				Since the installer completely removes the existing SharpDevelop installation,
				downgrades would work without any problems, but for now we 
				inform the user that a newer version already exists.
				-> Actually, there's trouble with downgrades because Windows Installer first determines
					the existing components before removing the old installation; so all versioned
					libraries will get removed instead of downgraded.
 			-->
			<Custom Action="NoDowngrade" After="FindRelatedProducts">NEWERVERSIONFOUND</Custom>
			<!--
				Removes the older version of SharpDevelop, if we are upgrading,
				before installing the new version.
				Unfortunately the user is not informed of this upgrade. I think
				we need a custom dialog showing the old installation located and
				the fact that it is going to be upgraded.
				The best place to do this is after InstallFinalize however if we
				do it then after we have removed a file from an addin, and changed
				the Component Guid, the modified component is not installed. So
				we make sure SharpDevelop is completely removed before installing
				the newer version. This also covers us if we accidentally
				modify a component but do not change its Guid.
				http://msdn.microsoft.com/library/en-us/msi/setup/removeexistingproducts_action.asp
			-->
			<RemoveExistingProducts Before="InstallInitialize"/>
            <Custom Action="WixCloseApplications" After="InstallInitialize" />
        </InstallExecuteSequence>

        <!-- Using WixUI -->
        <Property Id="WIXUI_INSTALLDIR">INSTALLDIR</Property>
        <UI>
            <UIRef Id="WixUI_FeatureTree" />
            <Error Id='1001'>Error [1]. [2]</Error>
        </UI>

    </Product>
</Wix>
